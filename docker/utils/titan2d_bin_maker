#!/bin/bash

if [[ "something$USER" == "something" ]]; then
    if [[ "$UID" == "0" ]]; then
        USER="root"
    fi
fi

# set to use compilers from devtoolset-8
source /opt/rh/devtoolset-7/enable

# make directories for dependencies sources and installation destination
export TITAN_WSP=$HOME/titan2d_wsp
export TITAN2D_DEP=${TITAN_WSP}/titan2d_dep
export TITAN2D_DEP_SRC=${TITAN_WSP}/titan2d_dep_src
#compile for architecture and path to headers
export TITAN2D_DEP_CFLAGS="-mtune=generic -I${TITAN2D_DEP}/include"
export TITAN2D_DEP_LDFLAGS="-L${TITAN2D_DEP}/lib"
export TITAN2D_BUILDS_TOP_DIR=${TITAN_WSP}/titan2d_bld
#cores to use for compilation
export CORES_TO_USE=`nproc`

export PATH="${TITAN2D_DEP}/bin:$PATH"
export LD_LIBRARY_PATH="${TITAN2D_DEP}/lib:$LD_LIBRARY_PATH"

if [[ "$USER" != "root" ]]; then
    [[ ! -d "${TITAN_WSP}" ]] && mkdir -p "${TITAN_WSP}"
    [[ ! -d "${TITAN2D_DEP}" ]] && mkdir -p "${TITAN2D_DEP}"
    [[ ! -d "${TITAN2D_DEP_SRC}" ]] && mkdir -p "${TITAN2D_DEP_SRC}"
    [[ ! -d "${TITAN2D_BUILDS_TOP_DIR}" ]] && mkdir -p "${TITAN2D_BUILDS_TOP_DIR}"
fi

set -e

loop=0
run_bash=0
run_bash_user=0

download_dependencies(){
    cd $TITAN2D_DEP_SRC
    wget https://github.com/TITAN2D/titan2d/releases/download/v4.0.0/dependencies.tar
    tar -xvf dependencies.tar
    rm dependencies.tar
    return
    # zlib
    wget https://downloads.sourceforge.net/project/libpng/zlib/1.2.8/zlib-1.2.8.tar.gz
    # hdf5
    wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.16/src/hdf5-1.8.16.tar.gz
    # gdal
    wget http://download.osgeo.org/gdal/2.1.0/gdal-2.1.0.tar.gz
    # Python
    wget https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tar.xz
    # PCRE for SWIG
    wget http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz
    # Swig
    wget http://prdownloads.sourceforge.net/swig/swig-3.0.5.tar.gz
    # cython
    wget https://files.pythonhosted.org/packages/b1/51/bd5ef7dff3ae02a2c6047aa18d3d06df2fb8a40b00e938e7ea2f75544cac/Cython-0.24.tar.gz
    # setuptools
    wget https://pypi.python.org/packages/f5/90/010892bde11d2da00548285da29a055e6b0e3b81592bb6021571b87f34a1/setuptools-22.0.0.tar.gz
    # numpy
    wget https://github.com/numpy/numpy/archive/v1.11.0.tar.gz
    mv v1.11.0.tar.gz numpy-1.11.0.tar.gz
    # h5py
    wget https://pypi.python.org/packages/22/82/64dada5382a60471f85f16eb7d01cc1a9620aea855cd665609adf6fdbb0d/h5py-2.6.0.tar.gz
    # Proper jpeg for PIL
    wget http://www.ijg.org/files/jpegsrc.v6b.tar.gz
    # Proper freetype2 for PIL
    wget https://sourceforge.net/projects/freetype/files/freetype2/2.3.12/freetype-2.3.12.tar.gz
    # PIL
    wget http://effbot.org/downloads/Imaging-1.1.7.tar.gz
    # libgd for gnuplot
    wget https://github.com/libgd/libgd/releases/download/gd-2.2.1/libgd-2.2.1.tar.gz
    # gnuplot
    wget https://sourceforge.net/projects/gnuplot/files/gnuplot/4.6.6/gnuplot-4.6.6.tar.gz
    # images2gif
    wget https://pypi.python.org/packages/d3/f9/4bd6d3dcf525cdbc7c0a4a15ab675edff81b6659dbd992abb5f5440c5c88/images2gif-1.0.1.tar.gz
}

install_zlib() {
    # ====================================================================
    # get zlib
    # ====================================================================
    cd $TITAN2D_DEP_SRC
    # wget http://zlib.net/zlib-1.2.8.tar.gz
    tar xvzf zlib-1.2.8.tar.gz
    cd zlib-1.2.8

    ./configure --prefix=$TITAN2D_DEP

    #set to use $TITAN2D_DEP_CFLAGS
    awk -F '=' "(\$1==\"CFLAGS\"){print \$0,\"$TITAN2D_DEP_CFLAGS\"}(\$1!=\"CFLAGS\")" Makefile > Makefile_new
    rm Makefile
    mv Makefile_new Makefile
    make -j $CORES_TO_USE
    make install
}
install_hdf5() {
    # ====================================================================
    # get hdf5
    # ====================================================================
    # serial version of hdf5 with C++ support needed to be installed
    cd $TITAN2D_DEP_SRC
    #wget https://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8.16/src/hdf5-1.8.16.tar.gz
    tar xvzf hdf5-1.8.16.tar.gz
    cd hdf5-1.8.16
    ./configure --prefix=$TITAN2D_DEP --enable-cxx CXXFLAGS="-g -O3 $TITAN2D_DEP_CFLAGS" CFLAGS="-g -O3 $TITAN2D_DEP_CFLAGS" LDFLAGS="$TITAN2D_DEP_LDFLAGS"
    make -j $CORES_TO_USE
    make install

    sed -i 's/^prefix\s*=.*$/prefix="$( dirname "$( cd "$( dirname "$0" )" \&\& pwd )" )"/g' ${TITAN2D_DEP}/bin/h5cc
    sed -i 's/^prefix\s*=.*$/prefix="$( dirname "$( cd "$( dirname "$0" )" \&\& pwd )" )"/g' ${TITAN2D_DEP}/bin/h5c++
}
install_gdal() {
    # ====================================================================
    # get gdal
    # ====================================================================
    cd $TITAN2D_DEP_SRC
    # wget http://download.osgeo.org/gdal/2.1.0/gdal-2.1.0.tar.gz
    tar xvzf gdal-2.1.0.tar.gz
    cd gdal-2.1.0
    #disable most of external formats to reduce shared library dependencies
    ./configure --prefix=$TITAN2D_DEP CXXFLAGS="-g -Os $TITAN2D_DEP_CFLAGS" CFLAGS="-g -Os $TITAN2D_DEP_CFLAGS" LDFLAGS="$TITAN2D_DEP_LDFLAGS" \
    --with-png=internal --with-jpeg=internal --without-curl --without-pg --without-mysql --without-sqlite3 --without-pcre --without-xml2
    make -j $CORES_TO_USE
    make install

    sed -i 's@^CONFIG_PREFIX\s*=.*$@@g' ${TITAN2D_DEP}/bin/gdal-config
    sed -i 's@^#!/bin/sh@#!/bin/sh\nCONFIG_PREFIX="$( dirname "$( cd "$( dirname "$0" )" \&\& pwd )" )"@g' ${TITAN2D_DEP}/bin/gdal-config
    CONFIG_PREFIX_OLD=${HOME}/titan2d_wsp/titan2d_dep
    sed -i "s@$CONFIG_PREFIX_OLD@\${CONFIG_PREFIX}@g" ${TITAN2D_DEP}/bin/gdal-config
}
 install_python2() {
    # ====================================================================
    # Python installation
    # ====================================================================
    #get openssl dev
    # Download, untar and compile python:
    cd $TITAN2D_DEP_SRC
    # wget https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tar.xz
    tar -xJf Python-2.7.11.tar.xz
    cd Python-2.7.11
    ./configure --prefix=$TITAN2D_DEP --enable-shared CXXFLAGS="$TITAN2D_DEP_CFLAGS" CFLAGS="$TITAN2D_DEP_CFLAGS" LDFLAGS="$TITAN2D_DEP_LDFLAGS"
    make -j $CORES_TO_USE
    make install

    rsync -a /usr/lib64/libcrypto.so* $TITAN2D_DEP/lib
    rsync -a /usr/lib64/libssl.so* $TITAN2D_DEP/lib

    # after that stage python can complain that some of the modules was not
    # successfully compiled, usually thouse modules are not needed for titan
    # bellow is example of such complains:
    #    Python build finished, but the necessary bits to build these modules were not found:
    #    _bsddb             bsddb185           bz2
    #    dbm                dl                 gdbm
    #    imageop            readline           sunaudiodev



}
install_pcre() {
    # ====================================================================
    # PCRE installation, used by SWIG
    # ====================================================================
    cd $TITAN2D_DEP_SRC
    # wget http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz
    tar xvzf pcre-8.37.tar.gz
    cd pcre-8.37
    ./configure --prefix=$TITAN2D_DEP --disable-shared CXXFLAGS="-g -O2 $TITAN2D_DEP_CFLAGS" CFLAGS="-g -O2 $TITAN2D_DEP_CFLAGS" LDFLAGS="$TITAN2D_DEP_LDFLAGS"
    make -j $CORES_TO_USE
    make install

    sed -i 's/^prefix\s*=.*$/prefix="$( dirname "$( cd "$( dirname "$0" )" \&\& pwd )" )"/g' ${TITAN2D_DEP}/bin/pcre-config
}
install_python2_swig() {
    # ====================================================================
    # Swig installation
    # ====================================================================
    #
    # swig is a tool for building python API
    #
    # Download, untar, compile and instal python:
    cd $TITAN2D_DEP_SRC
    # wget http://prdownloads.sourceforge.net/swig/swig-3.0.5.tar.gz
    tar xvzf swig-3.0.5.tar.gz
    cd swig-3.0.5
    ./configure --prefix=$TITAN2D_DEP  --with-python=$TITAN2D_DEP/bin/python --with-pcre-prefix=$TITAN2D_DEP CXXFLAGS="-g -O2 $TITAN2D_DEP_CFLAGS" CFLAGS="-g -O2 $TITAN2D_DEP_CFLAGS" LDFLAGS="$TITAN2D_DEP_LDFLAGS"
    make -j $CORES_TO_USE
    make install
}
 install_python2_cython() {
    # ====================================================================
    # cython installation
    # ====================================================================
    cd $TITAN2D_DEP_SRC
    # wget http://cython.org/release/Cython-0.24.tar.gz
    tar xvzf Cython-0.24.tar.gz
    cd Cython-0.24
    $TITAN2D_DEP/bin/python setup.py build
    $TITAN2D_DEP/bin/python setup.py install
}
 install_python2_setuptools() {
    # ====================================================================
    # setuptools
    # ====================================================================
    cd $TITAN2D_DEP_SRC
    # wget https://pypi.python.org/packages/f5/90/010892bde11d2da00548285da29a055e6b0e3b81592bb6021571b87f34a1/setuptools-22.0.0.tar.gz
    tar xvzf setuptools-22.0.0.tar.gz
    cd setuptools-22.0.0
    $TITAN2D_DEP/bin/python setup.py build
    $TITAN2D_DEP/bin/python setup.py install
}
 install_python2_numpy() {
    # ====================================================================
    # numpy installation
    # ====================================================================
    cd $TITAN2D_DEP_SRC
    # wget https://github.com/numpy/numpy/archive/v1.11.0.tar.gz
    # mv v1.11.0.tar.gz numpy-1.11.0.tar.gz
    tar xvzf numpy-1.11.0.tar.gz
    cd numpy-1.11.0
    $TITAN2D_DEP/bin/python setup.py build
    $TITAN2D_DEP/bin/python setup.py install
}
 install_python2_h5py() {
    # ====================================================================
    # h5py installation
    # ====================================================================
    cd $TITAN2D_DEP_SRC
    # wget https://pypi.python.org/packages/22/82/64dada5382a60471f85f16eb7d01cc1a9620aea855cd665609adf6fdbb0d/h5py-2.6.0.tar.gz
    tar xvzf h5py-2.6.0.tar.gz
    cd h5py-2.6.0
    $TITAN2D_DEP/bin/python setup.py build
    $TITAN2D_DEP/bin/python setup.py install
}
 install_jpeg() {
    # ====================================================================
    # Proper jpeg for PIL
    # ====================================================================
    cd $TITAN2D_DEP_SRC
    # wget http://www.ijg.org/files/jpegsrc.v6b.tar.gz
    tar xvzf jpegsrc.v6b.tar.gz
    cd jpeg-6b
    ./configure --prefix=$TITAN2D_DEP CFLAGS="-g -O2 $TITAN2D_DEP_CFLAGS -fPIC"
    make
    mkdir -p $TITAN2D_DEP/man/man1
    make install
    make install-lib
}
 install_freetype2() {
    # ====================================================================
    # Proper freetype2 for PIL
    # ====================================================================
    cd $TITAN2D_DEP_SRC
    # wget https://sourceforge.net/projects/freetype/files/freetype2/2.3.12/freetype-2.3.12.tar.gz
    tar xvzf freetype-2.3.12.tar.gz
    cd freetype-2.3.12

    ./configure --prefix=$TITAN2D_DEP CFLAGS="-g -O2 $TITAN2D_DEP_CFLAGS -fPIC"
    make
    make install
    sed -i 's/^prefix\s*=.*$/prefix="$( dirname "$( cd "$( dirname "$0" )" \&\& pwd )" )"/g' ${TITAN2D_DEP}/bin/freetype-config
}
 install_pil() {
    # ====================================================================
    # PIL installation
    # ====================================================================
    cd $TITAN2D_DEP_SRC
    # wget http://effbot.org/downloads/Imaging-1.1.7.tar.gz
    tar xvzf Imaging-1.1.7.tar.gz
    cd Imaging-1.1.7
    $TITAN2D_DEP/bin/python setup.py build
    $TITAN2D_DEP/bin/python setup.py install
}
 install_libgd() {
    # ====================================================================
    # libgd for gnuplot installation
    # ====================================================================
    cd $TITAN2D_DEP_SRC
    # wget https://github.com/libgd/libgd/releases/download/gd-2.2.1/libgd-2.2.1.tar.gz
    tar xvzf libgd-2.2.1.tar.gz
    cd libgd-2.2.1
    ./configure --prefix=$TITAN2D_DEP CFLAGS="-g -O2 $TITAN2D_DEP_CFLAGS" LDFLAGS="$TITAN2D_DEP_LDFLAGS"
    make -j $CORES_TO_USE
    make install

    sed -i 's/^prefix\s*=.*$/prefix="$( dirname "$( cd "$( dirname "$0" )" \&\& pwd )" )"/g' ${TITAN2D_DEP}/bin/gdlib-config
}
install_gnuplot() {
    # ====================================================================
    # gnuplot installation
    # ====================================================================
    cd $TITAN2D_DEP_SRC
    # wget https://sourceforge.net/projects/gnuplot/files/gnuplot/4.6.6/gnuplot-4.6.6.tar.gz
    tar xvzf gnuplot-4.6.6.tar.gz
    cd gnuplot-4.6.6
    ./configure --prefix=$TITAN2D_DEP CXXFLAGS="-g -O2 $TITAN2D_DEP_CFLAGS" CFLAGS="-g -O2 $TITAN2D_DEP_CFLAGS" LDFLAGS="$TITAN2D_DEP_LDFLAGS"
    make -j $CORES_TO_USE
    make install

}
install_images2gif() {
    # ====================================================================
    # images2gif
    # ====================================================================
    cd $TITAN2D_DEP_SRC
    # wget https://pypi.python.org/packages/d3/f9/4bd6d3dcf525cdbc7c0a4a15ab675edff81b6659dbd992abb5f5440c5c88/images2gif-1.0.1.tar.gz
    tar xvzf images2gif-1.0.1.tar.gz
    cd images2gif-1.0.1
    $TITAN2D_DEP/bin/python setup.py build
    $TITAN2D_DEP/bin/python setup.py install
}
install_java() {
    # ====================================================================
    # java installation
    # ====================================================================
    # we will get binaries from distro itself
    cd $TITAN2D_DEP/lib
    rsync -a /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.261.x86_64 ./
    mv java-1.7.0-openjdk-1.7.0.261.x86_64 java-1.7

    cd $TITAN2D_DEP/lib/java-1.7/jre/lib/amd64
    rsync -a /usr/lib64/libgconf-2.so.4* ./
    rsync -a /usr/lib64/libORBit-2.so.0* ./

    #now reinforce rpath
    cd $TITAN2D_DEP/lib/java-1.7/bin
    pwd

    for f in `find . -maxdepth 1 -type f -executable`
    do
    	if [[ "${f}" == "./java-rmi.cgi" ]]
        then
            continue
        elif [[ "${f}" == "./unpack200" ]]
        then
            chrpath -r '$ORIGIN:$ORIGIN/../jre/lib/amd64' $f
        else
            chrpath -r '$ORIGIN/../lib/amd64/jli:$ORIGIN/../lib/amd64:$ORIGIN/../jre/lib/amd64/jli:$ORIGIN/../jre/lib/amd64' $f
        fi
    done

    cd $TITAN2D_DEP/lib/java-1.7/lib/amd64/jli
    pwd
    for f in `find . -maxdepth 1 -type f -executable`
    do
    chrpath -r '$ORIGIN:$ORIGIN/../../../jre/lib/amd64:$ORIGIN/../../../jre/lib/amd64' $f
    done

    cd $TITAN2D_DEP/lib/java-1.7/jre/bin
    pwd
    for f in `find . -maxdepth 1 -type f -executable`
    do
    chrpath -r '$ORIGIN/../lib/amd64/jli:$ORIGIN/../lib/amd64' $f
    done

    cd $TITAN2D_DEP/lib/java-1.7/jre/lib/amd64
    pwd
    for f in `find . -maxdepth 1 -type f -executable`
    do
        if [[ "${f}" =~ ^(./libsunec.so|./libjsig.so|./libj2krb5.so|./libsaproc.so|./libpulse-java.so|./libgconf-2.so.*|./libORBit-2.so.*)$ ]]
        then
            continue
        else
            chrpath -r '$ORIGIN:$ORIGIN/jli' $f
        fi
    done

    cd $TITAN2D_DEP/lib/java-1.7/jre/lib/amd64/jli
    pwd
    for f in `find . -maxdepth 1 -type f -executable`
    do
    chrpath -r '$ORIGIN:$ORIGIN/..' $f
    done

}
 modify_dependencies_rpath() {
    # ====================================================================
    # Modify installation
    # ====================================================================
    #change rpath of executables
    #chrpath only can change existing RPATH and can not create a new one
    #some of the dependencies don't have RPATH thus we will use patchelf
    cd $TITAN2D_DEP/bin
    for f in `find . -maxdepth 1 -type f -executable`
    do
        echo $f
        if [[ "${f}" =~ ^(./h5redeploy|./gdal-config|./pcre-config|./h5cc|./h5c\+\+|./gdlib-config|./freetype-config)$ ]]
        then
            continue
        elif [[ "${f}" =~ ^(./bdftogd)$ ]]
        then
            continue
        elif [[ "${f}" =~ ^(./.*.py|./idle|./2to3|./python2.7-config|./pydoc|./easy_install-2.7|./cython|./cythonize|./easy_install)$ ]]
        then
            continue
        elif [[ "${f}" =~ ^(./cygdb)$ ]]
        then
            continue
        else
            patchelf --set-rpath '$ORIGIN:$ORIGIN/../lib' $f
        fi
    done

    cd $TITAN2D_DEP/lib
    chmod u+w $TITAN2D_DEP/lib/*
    set +e
    for f in `find . -maxdepth 1 -type f -executable`
    do
        echo $f
        if [[ "${f}" =~ ^(./libhdf5.so.10.1.0|./libz.so.1.2.8|./.*\.la|./libssl.so.1.0.1e)$ ]]
        then
            continue
        else
            chrpath -r '$ORIGIN' $f
            patchelf --set-rpath '$ORIGIN' $f
        fi
    done
    set -e
}

install_dependencies(){
    echo "install_dependencies"
    install_zlib
    install_hdf5
    install_gdal
    install_python2
    install_pcre
    install_python2_swig
    install_python2_cython
    install_python2_setuptools
    install_python2_numpy
    install_python2_h5py
    install_jpeg
    install_freetype2
    install_pil
    install_libgd
    install_gnuplot
    install_images2gif
    install_java
}

install_miniconda(){
    # python3 is used for tests
    cd
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
    sh ./Miniconda3-latest-Linux-x86_64.sh -b
    rm ./Miniconda3-latest-Linux-x86_64.sh
    # don't put conda stuff to bashrc to avoid confusion
    #~/miniconda3/bin/conda init
    ~/miniconda3/bin/conda install -y h5py
}

install_titan2d(){
    echo "install_titan2d"
    [[ -d "${TITAN2D_BUILDS_TOP_DIR}/gccoptomp" ]] && rm -rf "${TITAN2D_BUILDS_TOP_DIR}/gccoptomp"
    mkdir -p ${TITAN2D_BUILDS_TOP_DIR}/gccoptomp
    cd ${TITAN2D_BUILDS_TOP_DIR}/gccoptomp

    #
    #../../titan2d/configure --with-grass=<path_to_grass_installation> --without-gdal \
    #    --with-hdf5=<path_to_top_dir_of_hdf5> --prefix=<where_to_install>  \
    #    PYTHON=<path to python2.7> SWIG=<path to swig>\
    #    [--enable-mpi] [--enable-openmp] \
    #    [CXX=<path to non-default c++ compiler, mpic++ for example> ] \
    #    [CXXFLAGS=<non-default optimization flags, for example "-g -O0" for no optimization or "-O3" for heavy optimization ]\
    #    [CPPGLAGS=<non-default preprocessor flags, for example "-DDEB2" for extra debuging information]
    #
    #for example hybrid MPI/OpenMP:
    ../../titan2d/configure --prefix=${TITAN2D_BUILDS_TOP_DIR}/titan2d-gccoptomp --enable-openmp CXXFLAGS="-g -O2 -mtune=generic" --enable-portable --with-titan2d-dep=$TITAN2D_DEP

    # Now compile it:
    make -j $CORES_TO_USE
    make install
    # Update rpath

    return
}
run_tests(){
    echo "run_tests"
    cd ${TITAN_WSP}
    [[ ! -d "${TITAN_WSP}/titan2d_tests" ]] && git clone --depth=1 https://github.com/TITAN2D/titan2d_tests.git
    cd ${TITAN2D_BUILDS_TOP_DIR}

    ~/miniconda3/bin/python3 ~/titan2d_wsp/titan2d_tests/src/titest.py \
        --test-space=${TITAN2D_BUILDS_TOP_DIR}/titan2d_tests_gccoptomp -swig swig \
        -bin ${TITAN2D_BUILDS_TOP_DIR}/titan2d-gccoptomp/bin/titan -openmp -rt -v -np -ref std
}

while (( "$#" ))
do
    case "$1" in
    bash)
        echo "Will launching bash at the end"
        run_bash=1
        ;;
    bash_user)
        echo "Will launching bash at the end as regular user"
        run_bash_user=1
        ;;
    -c)
        # from docker cmd skip to next
        ;;
    -loop)
        loop=1
        ;;
    -set-no-exit-on-fail)
        set +e
        ;;
    -set-exit-on-fail)
        set -e
        ;;
    *)
        echo "Executing $1"
        eval "$1"
        ;;
    esac
    shift
done

if [ $run_bash -eq 1 ]; then
    /bin/bash
elif [ $run_bash_user -eq 1 ]; then
    su - centos
elif [ $loop -eq 1 ]; then
    echo "All requested daemon launched"
    while true; do
        sleep 60
    done
fi
